<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		   http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">			
	 
	 
	  <!--context:annotation-config_ tells Spring that you intend  
	 	 to use annotation-based wiring in Spring. Once it's in place
	 	 you can start annotating  your code to indicate that spring should
	 	 automatically wire values into properties, methods and constructors.
	 	   -->
	 <!-- ===================================================================  --> 
	 <!-- post-processors for all standard config annotations -->
		<context:annotation-config/>  
		
	   <!-- This declaration will cause Spring to locate every @Component, @Repository 
	    and @Service in your application. In practical terms this allows you to write 
	    a POJO and then simply annotate the new POJO as an @Service and Spring will 
	    automatically detect, instantiate and dependency inject your service at startup 
	    time. Importantly, you can then also have your new service injected into 
	    any other class that requires it simply by declaring a field for your service 
	    inside the relying class and Spring will inject it. Furthermore, this turns 
	    on @Autowired, @PostConstruct etc support. These annotations allow you to 
	    use common Spring and Java Enterprise Edition annotations in your classes 
	    without needing to do any special configuration. The most commonly used annotation 
	    is @Autowired, which instructs Spring to dependency inject an object into 
	    your class.
	 --> 		 
	 <!-- Initiate @Scheduled and @Async annotations for scheduling -->
 	<task:annotation-driven executor="onionSquareExecutorWithPoolSizeRange" scheduler="onionSquareTaskScheduler"/>
	<task:executor id="onionSquareExecutorWithPoolSizeRange" pool-size="5-25" queue-capacity="100"/>		           
	<task:scheduler id="onionSquareTaskScheduler" pool-size="1"/> 
		 	
	<context:component-scan base-package="com.onionsquare.core.model"/>	 
	<context:component-scan base-package="com.onionsquare.core.dao.impl"/>
	<context:component-scan base-package="com.onionsquare.core.service.impl"/>
	  	 
</beans>